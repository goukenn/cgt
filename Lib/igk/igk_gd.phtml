<?php


if (!extension_loaded("gd"))
{
	if (!function_exists("dl") || !@dl("gd.so"))
	{
		return;
	}
}
define("IGK_GD_SUPPORT", 1);

//----------------------------------------------------------------------------------
//global function
//----------------------------------------------------------------------------------

function igk_gd_resize_proportional($src, $w, $h, $type=1,  $compression=0)
{
	$ih = imagecreatefromstring($src);
	
	$W = imagesx($ih);
	$H = imagesy($ih);
	
	$ow = $w;
	$oh = $h;	
	
	$ex = $w/ $W;
	$ey = $h/ $H;
	
	$ex =  min($ex, $ey);
	
	$x = ((-$W * $ex) + $w)/2.0 ;
	$y = ((-$H * $ex) + $h)/2.0 ;
	
	$img = imagecreatetruecolor ($w, $h);
	//imagesavealpha($img, true);
	$black = imagecolorallocate($img, 0, 0, 0);
	// On rend l'arrière-plan transparent
	imagecolortransparent($img, $black);
	
	$sh = imagescale($ih, ceil($ex*$W), ceil($ex*$H));
	
	imagecopy($img, $sh, $x, $y, 0, 0,$w, $h);
	
	// $oih = imagescale($ih, $ow, $oh);//, IMG_NEAREST_NEIGHBOUR);
	// $g = "";
	$g = igk_ob_get_func(function($t)use($img, $compression){
		if ($t==1){
			imagepng($img, null, $compression);
		}else{
			imagejpeg($img, null, $compression);
		}
	}, array($type, $compression));
	imagedestroy($sh);
	imagedestroy($ih);
	imagedestroy($img);
	return $g;
	
}


//represent a gd wrapper
class IGKGD 
{
	private $m_width;
	private $m_height;
	private $m_himg;
	private function __construct($w,$h,$himg)
	{
		$this->m_width = $w;
		$this->m_height = $h;
		$this->m_himg = $himg;
	}
	
	public static function FromGd($himg){
		return new IGKGD(imagesx($himg), imagesy($himg), $himg);				
	}
	public function Render()
	{
		return imagepng($this->m_himg);
	}
	public function RenderText(){
		IGKOb::Start();
		$this->Render();		
		$c = IGKOb::Content();
		IGKOb::Clear();
		return $c;
	}
	public function Dispose(){ imagedestroy($this->m_himg) ; }
	
	public static function Create($imgwidth, $imgheight)
	{
		$v_img = imagecreatetruecolor($imgwidth, $imgheight); 		
		if (is_resource($v_img)){
			return new IGKGD($imgwidth, $imgheight, $v_img);
		}
		return null;
	}
	public function Clearw($webcolor){
		$this->Clearf(IGKColorf::FromString($webcolor));
	}
	public function Clearf($color)
	{
		if (is_string($color) && !empty($color))
		{
			$color = IGKColorf::FromString($color);
			// $this->Clearf(IGKColorf::FromString($color));
			// return;
		}
		$this->Clear((object)array("R"=>$color->R *255, 
		"G"=>$color->G *255, 
		"B"=>$color->B *255));		
	}
	public function Clear($color)
	{
		$hcl = imagecolorallocate($this->m_himg, $color->R, $color->G, $color->B);
		imagefill($this->m_himg, 0,0, $hcl);
		imagecolordeallocate ($this->m_himg, $hcl);
	}
	public function DrawString($string, $font, $size, $x, $y, $color)
	{
		$hcl = imagecolorallocate($this->m_himg, $color->R, $color->G, $color->B);
		$r = imagefttext($this->m_himg,$size, 0, $x, $y, $hcl, $font, $string);
		imagecolordeallocate ($this->m_himg, $hcl);
		return (object)array("x"=>$r[0],
			"y"=>$r[7],
			"width"=>abs($r[0]- $r[4]),
			"height"=>abs($r[5]- $r[1]));
	}
	public function DrawRectangle($color, $rect, $y=null, $width=null, $height=null)
	{
		if (is_string($color))
			$color = IGKColor::FromString($color);
		if (!is_object($rectx))
		{
			$rectx = new IGKRectanglef($rectx, $y,$width, $height);
		}
		$hcl = imagecolorallocate($this->m_himg, $color->R, $color->G, $color->B);
		imagerectangle($this->m_himg, $rect->X, $rect->Y, $rect->X + $rect->Width, $rect->y +$rect->Height, $hcl);
		imagecolordeallocate ($this->m_himg, $hcl);
	}
	public function FillRectangle($color, $rectx, $y=null, $width=null, $height=null)
	{
		if (is_string($color))
			$color = IGKColor::FromString($color);
		if (!is_object($rectx))
		{
			$rectx = new IGKRectanglef($rectx, $y,$width, $height);
		}
		$hcl = imagecolorallocate($this->m_himg, $color->R, $color->G, $color->B);
		
		imagefilledrectangle($this->m_himg, $rectx->X, $rectx->Y, $rectx->X + $rectx->Width, $rectx->Y +$rectx->Height, $hcl);
		imagecolordeallocate ($this->m_himg, $hcl);
	}
	private function _createColor($color){
		$hcl = null;
		if (is_object($color) )
			$hcl = imagecolorallocate($this->m_himg, $color->R, $color->G, $color->B);
		return $hcl;
	}
	public function DrawEllipse($color, $center, $radius){
		
		$hcl = $this->_createColor($color);
		imageellipse($this->m_himg, 
		$center->X ,
		$center->Y ,
		abs($radius->X *2.0 ), 
		abs($radius->Y *2.0),
		$hcl);
		imagecolordeallocate ($this->m_himg, $hcl);
	}
	public function FillEllipse($color, $center, $radius){
			$hcl = $this->_createColor($color);
		imagefilledellipse($this->m_himg, 
		$center->X ,
		$center->Y ,
		abs($radius->X *2.0 ), 
		abs($radius->Y *2.0),
		$hcl);
		imagecolordeallocate ($this->m_himg, $hcl);
	}
	
	public function DrawImage($himg, $x, $y, $w=-1, $h=-1){
		$rs = (($w==-1) && ($h==-1));
		$w = $w == -1 ? imagesx($himg) : $w;
		$h = $h == -1 ? imagesy($himg) : $h;		
		
		if (!$rs)
		{		
			$img = imagecreatetruecolor ($w, $h);	
			$sh = imagescale($himg, $w, $h);
			imagecopy($this->m_himg, $sh, $x, $y, 0, 0,$w, $h);			
			imagedestroy($img);
			imagedestroy($sh);
		}else		
			imagecopy($this->m_himg, $himg, $x, $y, 0, 0,$w, $h);
		
	}
}
?>